
print: (vec: std::vector<std::string>) = {
    for vec do(line) {
        std::cout << line << std::endl;
    }
}

tiltNorth: (inout lines: std::vector<std::string>) = {
    for std::views::iota(1u, lines.size()) do(i) {
        y := i;
        for std::views::iota(0u, lines[y].size()) do(j) {
            currentChar := lines[y][j];
            if currentChar == 'O' {
                movedY := y - 1;

                while (movedY >= 0u && movedY < lines.size() && lines[movedY][j] == '.') {
                    lines[movedY][j] = 'O';
                    lines[movedY + 1][j] = '.';
                    movedY -= 1;
                }

                //std::cout << "Moved rock at " << i << ", " << j << std::endl;
                //lines.print();
                //std::cout << std::endl;
            }
        }
    }
}

tiltSouth: (inout lines: std::vector<std::string>) = {
    for std::views::iota(1u, lines.size()) do(i) {
        y : = lines.size() - i - 1;
        for std::views::iota(0u, lines[y].size()) do(j) {
            currentChar := lines[y][j];
            if currentChar == 'O' {
                movedY := y + 1;

                while (movedY >= 0u && movedY < lines.size() && lines[movedY][j] == '.') {
                    lines[movedY][j] = 'O';
                    lines[movedY - 1][j] = '.';
                    movedY += 1;
                }

                //std::cout << "Moved rock at " << i << ", " << j << std::endl;
                //lines.print();
                //std::cout << std::endl;
            }
        }
    }
}

tiltWest: (inout lines: std::vector<std::string>) = {
    for std::views::iota(1u, lines[0].size()) do(j) {
        x := j;
        for std::views::iota(0u, lines.size()) do(i) {
            y : = i;
            currentChar := lines[y][x];
            if currentChar == 'O' {
                movedX := x - 1;

                while (movedX >= 0u && movedX < lines[y].size() && lines[y][movedX] == '.') {
                    lines[y][movedX] = 'O';
                    lines[y][movedX + 1] = '.';
                    movedX -= 1;
                }

                //std::cout << "Moved rock at " << x << ", " << y << std::endl;
                //lines.print();
                //std::cout << std::endl;
            }
        }
    }
}

tiltEast: (inout lines: std::vector<std::string>) = {
    for std::views::iota(1u, lines[0].size()) do(j) {
        x := lines[0].size() - j - 1;
        for std::views::iota(0u, lines.size()) do(i) {
            y : = i;
            currentChar := lines[y][x];
            if currentChar == 'O' {
                movedX := x + 1;

                while (movedX >= 0u && movedX < lines[y].size() && lines[y][movedX] == '.') {
                    lines[y][movedX] = 'O';
                    lines[y][movedX - 1] = '.';
                    movedX += 1;
                }

                //std::cout << "Moved rock at " << x << ", " << y << std::endl;
                //lines.print();
                //std::cout << std::endl;
            }
        }
    }
}

getNorthScore: (lines: std::vector<std::string>) -> uint64_t = {
    totalScore := 0u;
    for std::views::iota(0u, lines.size()) do(i) {
        for std::views::iota(0u, lines[i].size()) do(j) {
            if lines[i][j] == 'O' {
                score := lines[i].size() - i;
                totalScore += score;
            }
        }
    }
    return totalScore;
}

part1: () = {
    input: std::ifstream = std::ifstream("inputs/day14.txt");
    if (!input.is_open()) {
        std::cout << "Failed to open file" << std::endl;
        return;
    }

    inputStr: std::string = ();
    lines := std::vector<std::string>();
    
    while (std::getline(input, inputStr)) {
        lines.push_back(move inputStr);
    }

    std::cout << "Before: " << std::endl;
    lines.print();
    std::cout << std::endl;

    lines.tiltNorth();

    std::cout << "After: " << std::endl;
    lines.print();
    std::cout << std::endl;

    totalScore := 0u;
    for std::views::iota(0u, lines.size()) do(i) {
        for std::views::iota(0u, lines[i].size()) do(j) {
            if lines[i][j] == 'O' {
                score := lines[i].size() - i;
                totalScore += score;
            }
        }
    }

    std::cout << "Part 1: " << lines.getNorthScore() << std::endl;
}

part2: () = {
    input: std::ifstream = std::ifstream("inputs/day14.txt");
    if (!input.is_open()) {
        std::cout << "Failed to open file" << std::endl;
        return;
    }

    inputStr: std::string = ();
    lines := std::vector<std::string>();
    
    while (std::getline(input, inputStr)) {
        lines.push_back(move inputStr);
    }

    std::cout << "Before: " << std::endl;
    lines.print();
    std::cout << std::endl;

    for std::views::iota(0u, 1000000000u) do(cycle) {
        lines.tiltNorth();
        lines.tiltWest();
        lines.tiltSouth();
        lines.tiltEast();

        //std::cout << "Cycle " << cycle + 1 << ": " << std::endl;
        //lines.print();
        //std::cout << std::endl;

        // Set a breakpoint here and manually inspect the cycles!
        if cycle > 1000u {
            std::cout << "North score @ cycle" << cycle << ":" << lines.getNorthScore() << std::endl;
        }
        
    }

    std::cout << "After: " << std::endl;
    lines.print();
    std::cout << std::endl;

    std::cout << "Part 2: " << lines.getNorthScore() << std::endl;
}

main: () -> int = {
    part1();
    part2();

    return 0;
}
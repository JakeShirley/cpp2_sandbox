copyDigitString: (input: std::string_view, inout destination: int) = {
    for input do (c) {
        if c >= '0' && c <= '9' {
            destination *= 10;
            destination += (c - '0');
        }
    }
}

Card : type = {
    public winningNumbers: std::array<int, 10> = ();
    actualNumbers: std::array<int, 25> = ();

    calculateWinningNumbers: (this) -> int = {
        winningNumberCount: int = 0;
        for actualNumbers do (actualNumber) {
            for winningNumbers do (winningNumber) {
                if actualNumber == winningNumber {
                    winningNumberCount++;
                    break;
                }
            }
        }
        return winningNumberCount;
    }

    operator=: (out this, line: std::string_view) = {
        for std::views::iota(0, 10) do (i) {
            copyDigitString(line.substr(10 + (i * 3), 2), this.winningNumbers[i]);
        }

        for std::views::iota(0, 25) do (i) {
            copyDigitString(line.substr(41 + (i * 3), 3), this.actualNumbers[i]);
        }

        //std::regex r(R"((\b[[:alpha:]]+\b)|(\b\d+\b))");
        /*
        parsingRegex: std::regex = std::regex(R"(Card\s+(\d+):\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+\|\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+))");

        match: std::smatch = ();

        if (std::regex_search(line, match, parsingRegex)) {
            std::cout << match.size() << " sub-match found!";
            for match do (submatch) {
                std::cout << "\nSubmatch: " << submatch;
            }

            this.winningNumbers = std::array<int, 10> { 
                std::atoi(match[1]).c_str(),
                std::atoi(match[2]).c_str(),
                std::atoi(match[3]).c_str(),
                std::atoi(match[4]).c_str(),
                std::atoi(match[5]).c_str(),
                std::atoi(match[6]).c_str(),
                std::atoi(match[7]).c_str(),
                std::atoi(match[8]).c_str(),
                std::atoi(match[9]).c_str(),
                std::atoi(match[10]).c_str()
            };
        }
        */
    }
}
main: () -> int = {
    input: std::ifstream = std::ifstream("inputs/day4.txt");
    if (!input.is_open()) {
        std::cout << "Failed to open file" << std::endl;
        return -1;
    }

    
    lineValue: std::string = ();
    cards: std::vector<std::unique_ptr<Card>> = ();
    while (std::getline(input, lineValue)) {
       cards.push_back(new<Card>(lineValue));
    }

    totalWinningScore := 0;
    cardCounts: std::vector<int> = ();
    cardCounts.resize(cards.size(), 1);

    totalCards := 0;
    currentCardIndex := 0;
    for cards do (card) {
        winningNumbers := card*.calculateWinningNumbers();
        if winningNumbers > 0 {
            totalWinningScore += 1 << (winningNumbers - 1);

            for std::views::iota(0, winningNumbers) do (i) {
                cardCounts[currentCardIndex + 1 + i] += cardCounts[currentCardIndex];
            }
        }
        
        totalCards += cardCounts[currentCardIndex];
        currentCardIndex++;
    }

    std::cout << "Total winning score: " << totalWinningScore << std::endl;
    std::cout << "Total cards: " << totalCards << std::endl;

    //std::cout << "Total value: " << totalNumbersCount << " from " << numbersAdded.size() << " numbers" << std::endl;
    //std::cout << "Gears: " << totalGears << " with gear ratio of " << totalGearRatio << std::endl;
}
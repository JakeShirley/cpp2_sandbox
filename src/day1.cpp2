

calculateLineValuePart1: (text: std::string) -> int = {
    characterVec: std::vector<char> = (text.begin(), text.end());
    numericCharactersVec:= characterVec | std::views::filter(:(a) -> bool = {
        return a >= '0' && a <= '9';
    });

    firstDigit: int = numericCharactersVec.front() - '0';
    secondDigit: int = numericCharactersVec.back() - '0';

    return firstDigit * 10 + secondDigit;
}

calculateLineValuePart2: (text: std::string) -> int = {
    digitWords: std::unordered_map<std::string, int> = ();

    digitWords["zero"] = 0;
    digitWords["one"] = 1;
    digitWords["two"] = 2;
    digitWords["three"] = 3;
    digitWords["four"] = 4;
    digitWords["five"] = 5;
    digitWords["six"] = 6;
    digitWords["seven"] = 7;
    digitWords["eight"] = 8;
    digitWords["nine"] = 9;
    digitWords["0"] = 0;
    digitWords["1"] = 1;
    digitWords["2"] = 2;
    digitWords["3"] = 3;
    digitWords["4"] = 4;
    digitWords["5"] = 5;
    digitWords["6"] = 6;
    digitWords["7"] = 7;
    digitWords["8"] = 8;
    digitWords["9"] = 9;

    firstWordIndex: std::optional<size_t> = std::nullopt;
    firstDigit: int = 0;

    for digitWords do (digitWord) {
        foundIndex:= text.find(digitWord.first);
        if (foundIndex != std::string::npos) {
            if (foundIndex < firstWordIndex || !firstWordIndex.has_value()) {
                firstWordIndex = foundIndex;
                firstDigit = digitWord.second;
            }
        }
    }

    secondWordIndex: std::optional<size_t> = std::nullopt;
    secondDigit: int = 0;

    for digitWords do (digitWord) {
        foundIndex:= text.rfind(digitWord.first);
        if (foundIndex != std::string::npos) {
            if (foundIndex > secondWordIndex || !secondWordIndex.has_value()) {
                secondWordIndex = foundIndex;
                secondDigit = digitWord.second;
            }
        }
    }

    return firstDigit * 10 + secondDigit;
}


main: () -> int = {
    input: std::ifstream = std::ifstream("inputs/day1.txt");
    if (!input.is_open()) {
        std::cout << "Failed to open file" << std::endl;
        return -1;
    }

    totalLines: int = 0;
    totalValue: int = 0;
    lineValue: std::string = ();
    while (std::getline(input, lineValue)) {
        totalValue += calculateLineValuePart2(lineValue);
        totalLines += 1;
    }

    std::cout << "Total value: " << totalValue << ", total lines: " << totalLines << std::endl;
}
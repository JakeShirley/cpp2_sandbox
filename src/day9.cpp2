
calculateNextNumber: (inout self: ExtrapolatedSequence, forwards: bool, depth: int) -> int64_t = {
        differences: std::vector<int64_t> = ();
        differences.reserve(self.sequence.size() - 1);

        for std::views::iota(0u, self.sequence.size() - 1) do (i) {
            differences.push_back(self.sequence[i + 1] - self.sequence[i]);
        }

        areAllEqual: bool = std::adjacent_find(differences.begin(), differences.end(), std::not_equal_to<int64_t>()) == differences.end();

        if areAllEqual && differences[0] == 0 {
            self.print(depth);
            return self.sequence[0];
        } else {
            deeperSequence := ExtrapolatedSequence();
            deeperSequence.sequence = differences;
            extrapolatedNumber := calculateNextNumber(deeperSequence&*, forwards, depth + 1);

            if forwards {
                newNumber := self.sequence.back() + extrapolatedNumber;
                self.sequence.push_back(newNumber);
            } else {
                newNumber := self.sequence.front() - extrapolatedNumber;
                self.sequence.insert(self.sequence.begin(), newNumber);
            }

            self.print(depth);

            if forwards {
                return self.sequence.back();
            } else {
                return self.sequence.front();
            }
        }
    }

ExtrapolatedSequence : @struct type = {
    sequence: std::vector<int64_t> = ();

    print: (this, padding: int) = {
        for std::views::iota(0, padding) do (_) {
            std::cout << ' ';
        }  

        for sequence do (i) {
            std::cout << i << " ";
        }

        std::cout << std::endl;
    }
}

doTheThing: (forwards: bool) -> int = {
    input: std::ifstream = std::ifstream("inputs/day9.txt");
    if (!input.is_open()) {
        std::cout << "Failed to open file" << std::endl;
        return -1;
    }

    totalExtrapolatedNumbers: int64_t = 0;
    inputStr: std::string = ();
    while (std::getline(input, inputStr)) {

        sequence: ExtrapolatedSequence = ();
        lineParser: std::stringstream = (inputStr);

        // debug to make the variable used
        lineParser.good();

        parsedNumber: std::string = ();
        while (std::getline(lineParser, parsedNumber, ' ')) {
            sequence.sequence.push_back(std::stoi(parsedNumber));
        }


        nextNumber := sequence.calculateNextNumber(forwards, 0);
        totalExtrapolatedNumbers += nextNumber;
        
        std::cout << "Next number: " << nextNumber << std::endl;
    }

    std::cout << "Total extrapolated: " << totalExtrapolatedNumbers << std::endl;
}

part1: () -> int = {
    return doTheThing(true);    
}

part2: () -> int = {
    return doTheThing(false);  
}

main: () -> int = {
    //return part1();
    return part2();
}
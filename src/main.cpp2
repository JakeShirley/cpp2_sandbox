
getCardValue: (input: char) -> int64_t = {
    if input == '2' { return 2; } 
    if input == '3' { return 3; }
    if input == '4' { return 4; } 
    if input == '5' { return 5; } 
    if input == '6' { return 6; } 
    if input == '7' { return 7; }
    if input == '8' { return 8; }
    if input == '9' { return 9; } 
    if input == 'T' { return 10; } 
    if input == 'J' { return 1; }  // Part 2, J is now a joker and worth 1
    if input == 'Q' { return 12; }
    if input == 'K' { return 13; } 
    if input == 'A' { return 14; } 

    std::cout << "unknown card type: " << input << std::endl;
    return 0;
}

isFullHouse: (input: std::string_view) -> bool = {
    return ((input[0] == input[1] == input[2]) && (input[3] == input[4]))
        || ((input[0] == input[1]) && (input[2] == input[3] == input[4]))
        || ((input[0] == 'J') && (input[1] == input[2] == input[3]))
        || ((input[0] == 'J') && (input[2] == input[3] == input[4]))
        || ((input[0] == 'J' == input[1] == 'J') && (input[2] == input[3]))
        || ((input[0] == 'J' == input[1] == 'J') && (input[3] == input[4]))
        || ((input[0] == 'J' == input[1] == input[2] == 'J'))
    ;
}

isFiveOfAKind: (input: std::string_view) -> bool = {
    return (input[0] == input[1] == input[2] == input[3] == input[4])
        || (input[0] == 'J' && input[1] == input[2] == input[3] == input[4])
        || (input[0] == input[1] == 'J' && input[2] == input[3] == input[4])
        || (input[0] == input[1] == input[2] == 'J' && input[3] == input[4])
        || (input[0] == input[1] == input[2] == input[3] == 'J');
}

isFourOfAKind: (input: std::string_view) -> bool = {
    return (input[0] == input[1] == input[2] == input[3]) 
        || (input[1] == input[2] == input[3] == input[4])
        || (input[0] == 'J' && input[1] == input[2] == input[3])
        || (input[0] == 'J' && input[2] == input[3] == input[4])
        || (input[0] == input[1] == 'J' && input[2] == input[3])
        || (input[0] == input[1] == 'J' && input[3] == input[4])
        || (input[0] == input[1] == input[2] == 'J');
}

isThreeOfAKind: (input: std::string_view) -> bool = {
    return (input[0] == input[1] == input[2])
        || (input[1] == input[2] == input[3]) 
        || (input[2] == input[3] == input[4])
        || (input[0] == 'J' && input[1] == input[2])
        || (input[0] == 'J' && input[2] == input[3])
        || (input[0] == 'J' && input[3] == input[4])
        || (input[0] == input[1] == 'J');
}

isTwoPair: (input: std::string_view) -> bool = {
    return (input[0] == input[1] && input[2] == input[3]) 
        || (input[0] == input[1] && input[3] == input[4]) 
        || (input[1] == input[2] && input[3] == input[4])
        || (input[0] == 'J' && input[1] == input[2])
        || (input[0] == 'J' && input[2] == input[3])
        || (input[0] == 'J' && input[3] == input[4])
        || (input[0] == input[1] == 'J' && input[2] == input[3])
        || (input[0] == input[1] == 'J' && input[3] == input[4])
        || (input[0] == input[1] == input[2] == 'J');
}

ifOnePair: (input: std::string_view) -> bool = {
    return (input[0] == input[1])
        || (input[1] == input[2]) 
        || (input[2] == input[3]) 
        || (input[3] == input[4])
        || (input[0] == 'J');
}

CardHand : @struct type = {
    unsortedHand: std::string = ();
    sortedHand: std::string = ();
    bid: int64_t = ();

    isFiveOfAKind: bool = false;
    isFourOfAKind: bool = false;
    isFullHouse: bool = false;
    isThreeOfAKind: bool = false;
    isTwoPair: bool = false;
    isOnePair: bool = false;

    operator<: (this, that) -> bool = {
        thisTie := std::make_tuple(
            this.isFiveOfAKind, 
            this.isFourOfAKind, 
            this.isFullHouse, 
            this.isThreeOfAKind, 
            this.isTwoPair, 
            this.isOnePair, 
            getCardValue(this.unsortedHand[0]), 
            getCardValue(this.unsortedHand[1]), 
            getCardValue(this.unsortedHand[2]), 
            getCardValue(this.unsortedHand[3]), 
            getCardValue(this.unsortedHand[4])
        );

        thatTie := std::make_tuple(
            that.isFiveOfAKind, 
            that.isFourOfAKind, 
            that.isFullHouse, 
            that.isThreeOfAKind, 
            that.isTwoPair, 
            that.isOnePair, 
            getCardValue(that.unsortedHand[0]), 
            getCardValue(that.unsortedHand[1]), 
            getCardValue(that.unsortedHand[2]), 
            getCardValue(that.unsortedHand[3]), 
            getCardValue(that.unsortedHand[4])
        );

        return thisTie < thatTie;
    }

}

part1: () -> int = {
    input: std::ifstream = std::ifstream("inputs/day7.txt");
    if (!input.is_open()) {
        std::cout << "Failed to open file" << std::endl;
        return -1;
    }

    hands: std::vector<CardHand> = ();
    inputStr: std::string = ();
    while (std::getline(input, inputStr)) {
        hand: CardHand = ();

        hand.sortedHand = inputStr.substr(0, inputStr.find(" "));
        hand.unsortedHand = hand.sortedHand;

        // Sort low to high
        std::sort(std::begin(hand.sortedHand), std::end(hand.sortedHand), :(a, b) -> bool = {
            return getCardValue(a) < getCardValue(b);
        });

        hand.isFiveOfAKind = isFiveOfAKind(hand.sortedHand);
        hand.isFourOfAKind = isFourOfAKind(hand.sortedHand);
        hand.isFullHouse = isFullHouse(hand.sortedHand);
        hand.isThreeOfAKind = isThreeOfAKind(hand.sortedHand);  
        hand.isTwoPair = isTwoPair(hand.sortedHand);
        hand.isOnePair = ifOnePair(hand.sortedHand);

        hand.bid = std::atoi(inputStr.substr(inputStr.find(" ") + 1).c_str());

        hands.push_back(hand);
    }

    std::sort(hands.begin(), hands.end(), :(a, b) -> bool = {
        return a < b;
    });

    totalScore: int64_t = 0;
    for std::views::iota(0u, hands.size()) do (i) {
        currentHand := hands[i];
        rank := i + 1;
        score := currentHand.bid * rank;
        totalScore += score;
    }

    std::cout << "Total Score: " << totalScore << std::endl;

    return 0;
}


part2: () = {
    
}

main: () -> int = {
    return part1();
    //part2();
}